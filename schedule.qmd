---
title: "Schedule"
---

The following schedule lists the topics we will cover and approximately the number of meetings we will spend on each topic. The schedule is _tentative_. Most likely, some things will change during the semester, and I will revise the schedule as necessary.

The **Reading** column lists the assigned reading for the meeting. You should view the readings as an introduction to spark discussion in class.

The **Assignment** column lists the due date for each assignment.

The readings will be classified into the following order of recommendation:

1. Advised (i.e., expected, required, and of highest importance) — assigned.
2. Recommended (i.e., important but read after previous category) — assigned.
3. Supplemental (i.e., additional material for a different perspective) – optional.
4. Fun (i.e., related fun additional material) – optional.

# Week-By-Week

| Week |  | Date | Topic | Reading | Assignment |
|---|---|---|---|---|---|
| 1 | T | 8/29 | Welcome and course overview<br/> [meeting01] |  | Post a [note](#post-introduction-and-background) on Piazza to introduce yourself. Review the Course [Syllabus](index.html). |
|  | R | 8/31 | Classic application: Model checking and counterexample-guided abstraction refinement<br/> [meeting02] [meeting02-hw00] [meeting02-slides] | **Supplemental**. Thomas Ball and Sriram K. Rajamani. [The SLAM Project: Debugging System Software via Static Analysis](http://doi.acm.org/10.1145/503272.503274). Symposium on Principles of Programming Languages (POPL), 2002.<br/>**Supplemental**. Thomas Ball and Sriram K. Rajamani. [Automatically Validating Temporal Safety Properties of Interfaces](https://doi.org/10.1007/3-540-45139-0_7). International SPIN Workshop, 2001.<br/> **Recommended**. Thomas A. Henzinger, Ranjit Jhala, Rupak Majumdar, and Gregoire Sutre. [Lazy Abstraction](http://doi.acm.org/10.1145/503272.503279). Symposium on Principles of Programming Languages (POPL), 2002.<br/><br/> Software model checking with counterexample-guided abstraction refinement marked a major milestone in taking automated reasoning techniques into industrial practice. |  |
| 2 | T | 9/5 | Judgments and rules | **Advised**. Harper Ch. 1.1; Winskel Ch. 1 and 3.1-3.3.<br/> Provides some preliminaries for HW0 (optional depending on your background). Rest of Harper Ch. 1 is helpful but "supplemental" for HW0.<br/><br/> **Supplemental**. Pierce Ch. 2 and 3.1-3.3.<br/> Another take on mathematical preliminaries for HW0 (optional depending on your background). |  |
|  | R | 9/7 | Judgments and rules | **Advised**. Harper Ch. 2.<br/> It is ok to skim 2.4 and 2.6-2.7 for now. | HW0 due Fri |
| 3 | T | 9/12 | Statics and dynamics | **Advised**. Harper Ch. 3<br/> It is ok to skim 3.3-3.4 for now.<br/><br/> **Advised**. Winskel Ch. 2<br/> Sections 2.1-2.5 defines a big-step operational semantics for a simple imperative language IMP. Then, Section 2.6 sketches a small-step operational semantics. |  |
|  | R | 9/14 | Statics and dynamics | **Advised**. Harper Ch. 4-5 and 7.1-7.2<br/> It is ok to skim 5.4 for now.<br/><br/> **Recommended**. Pierce 3.4<br/> A high-level overview of the three basic approaches to formalizing semantics. |  |
| 4 | T | 9/19 | Type safety | **Advised**. Harper Ch. 6 and 7.3<br/> About type safety.<br/><br/> **Supplemental**. Pierce 3.5 and Ch. 8<br/> Another take on operational semantics and type safety. |  |
|  | R | 9/21 | Type safety | **Advised**. Harper 2.4; Winskel 3.4 and Ch. 4<br/> Revisit induction on derivations. | HW1 due Fri |
| 5 | T | 9/26 | Imperative computation | **Advised**. Winskel Ch. 2<br/> **Recommended**. Harper Ch. 34 |  |
|  | R | 9/28 | Imperative computation |  |  |
| 6 | T | 10/3 | Functions | **Advised**. Harper Ch. 8-9 |  |
|  | R | 10/5 | Finite data types | **Advised**. Harper Ch. 10-11 | HW3 due Fri |
| 7 | T | 10/10 | Denotational semantics | **Advised**. Winskel Ch. 5 |  |
|  | R | 10/12 | Denotational semantics |  |  |
| 8 | T | 10/17 | Recursive types |  |  |
|  | R | 10/19 | Parametric polymorphism |  | HW4 due Fri |
| 9 | T | 10/24 | Axiomatic semantics |  |  |
|  | R | 10/26 | Axiomatic semantics |  |  |
| 10 | T | 10/31 | Control flow: Exceptions and continuations |  |  |
|  | R | 11/2 | Control flow: Exceptions and continuations |  |  |
| 11 | T | 11/7 | Verification-condition generation |  |  |
|  | R | 11/9 | Verification-condition generation |  |  |
| 12 | T | 11/14 | Abstract interpretation |  |  |
|  | R | 11/16 | Abstract interpretation |  |  |
| 13 | T | 11/21 | No class: Thanksgiving |  |  |
|  | R | 11/23 | No class: Thanksgiving |  |  |
| 14 | T | 11/28 | Research application |  |  |
|  | R | 11/30 | Research application |  |  |
| 15 | T | 12/5 | Final exam review |  |  |
|  | R | 12/7 | Final exam: evening (time TBD) |  |  |
| 16 | T | 12/12 | Final project presentations |  |  |
|  | R | 12/14 | Final project presentations |  |  |
| 17 | T | 12/19 | Finals week |  |  |

[meeting01]: meetings/meeting01-welcome.class.pdf
[meeting02]: meetings/meeting02.class.pdf
[meeting02-hw00]: meetings/meeting02-hw00.class.pdf
[meeting02-slides]: meetings/meeting02-modelchecking-cegar.class.pdf

# Post Introduction and Background

Post a note on Piazza to introduce yourself and tell me about your background.

What's your background?
- Comfort with functional programming?
- Comfort with mathematical logic and induction?
- Experience with building language tools (interpreters, translators)?
- What do you want out of this class?

If you prefer, you can send a separate private note to me about your background.
